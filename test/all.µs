(define (sum-when-you-apply-from-1-to f max)
 (let ([help 7]
       [sum 0])
  (begin
   (set! help
    (lambda (n)
     (if (= n 0)
      sum
      (begin
       (set! sum (+ sum (f n)))
       (help (- n 1))))))
   (help max))))

(define (slow+ a b)
 (if (= 0 a)
  b
  (+ 1 (slow+ (- a 1) b))))

(define (slow* a b)
 (if (= 0 a)
  0
  (slow+ b (slow* (- a 1) b))))

(define (square a) (slow* a a))

(define (compose f g) (lambda (a) (f (g a))))

(sum-when-you-apply-from-1-to (compose square square) 10)

